<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2017, Xuliang Huang. All rights reserved.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.atguigu.demo.service"/>

    <!--当前应用的名称-->
    <dubbo:application name="demo-provider"/>

    <!--指定Zookeeper注册中心的位置-->
    <dubbo:registry protocol="zookeeper" address="zookeeper://localhost:2181"/>

    <!--配置接口的实现类-->
    <bean id="demoRemote" class="com.atguigu.demo.remote.implement.DemoRemoteImpl"/>

    <!-- 指定Dubbo对外暴露服务的端口号 -->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!--注册服务-->
    <dubbo:service interface="com.atguigu.demo.interfaces.DemoRemoteInterface"
                   ref="demoRemote"/>

    <!-- 配置数据源 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
    </bean>

    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="comboPooledDataSource"/>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.demo.mappers"/>
    </bean>

    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="comboPooledDataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="checkUserNameExists" read-only="true"/>
            <tx:method name="save*" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
            <tx:method name="remove*" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
            <tx:method name="update*" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--<aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*Service(..))"/>-->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* *..service..*(..))"/>
    </aop:config>

    <!--配置Solr的bean-->
    <bean class="org.apache.solr.client.solrj.impl.HttpSolrServer">
        <constructor-arg name="baseURL" value="http://localhost:8081/solr/demo_core"/>
    </bean>

</beans>